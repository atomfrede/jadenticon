plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.15.0'
    id "com.github.ben-manes.versions" version "0.46.0"
    id "com.diffplug.spotless" version "6.18.0"
    id "com.github.andygoossens.gradle-modernizer-plugin" version "1.8.0"
    id 'com.adarshr.test-logger' version '3.2.0'
}

scmVersion {
    tag {
        prefix = ''
    }
    hooks {
        pre 'fileUpdate', [
            file: 'README.md', pattern: {v, c -> /<version>$v/}, replacement: {v, c -> "<version>$v"}
        ]
        pre 'fileUpdate', [
            file: 'README.md', pattern: {v, c -> /com.github.atomfrede:jadenticon:$v/}, replacement: {v, c -> "com.github.atomfrede:jadenticon:$v"}
        ]
        pre 'commit'
    }
}

spotless {
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/*.adoc', '**/.gitignore'
        targetExclude 'node_modules/**/*.*', ".gradle/**", "build/**/*.*", "target/**/*.*", "src/test/e2e/node_modules/**"
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

test {
    include '**/*Test.*'
    exclude '**/*Spec.*', '**/*IT.*'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.8"
}

ext.moduleName = 'com.github.atomfrede.jadenticon'

group 'com.github.atomfrede'


repositories {
    mavenCentral()
}

dependencies {
    implementation "commons-io:commons-io:2.11.0"
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.16'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.8'
    implementation 'org.apache.xmlgraphics:batik-codec:1.16'
    implementation 'org.openjdk.nashorn:nashorn-core:15.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation "com.tngtech.archunit:archunit-junit5-api:1.0.1"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:1.0.1"
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}

jacocoTestReport {
//    executionData tasks.withType(Test)
    executionData tasks.matching({
        it.name.equals("integrationTest") || it.name.equals("test")
    })
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = 'jadenticon'
                description = 'Jadenticon is a simple java wrapper for the Jdenticon javascript library to create nice looking, random identicons.'
                url = 'http://www.example.com/library'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'atomfrede'
                        name = 'Frederik Hahne'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/atomfrede/jadenticon.git'
                    developerConnection = 'scm:git:ssh://github.com/atomfrede/jadenticon.git'
                }
            }
        }
    }
}

project.version = scmVersion.version

check.dependsOn jacocoTestReport
